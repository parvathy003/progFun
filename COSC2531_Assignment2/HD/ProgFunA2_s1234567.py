# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12B5CFKC5x5FdfAWcf8TVVJFWvuAZq0XF
"""

import sys
from datetime import datetime

class Customer:
    def __init__(self, ID, name, reward):
        self._ID = ID
        self._name = name
        self._reward = reward

    def get_ID(self):
        return self._ID

    def get_name(self):
        return self._name

    def get_reward(self, total_cost):
        pass

    def get_discount(self, total_cost):
        return 0

    def update_reward(self, value):
        pass

    def display_info(self):
        pass

    def deduct_rewards(self, cost):
        if self._reward >= cost:
            self._reward -= cost
            return 0
        else:
            remaining_cost = cost - self._reward
            self._reward = 0
            return remaining_cost

class BasicCustomer(Customer):
    reward_rate = 1.0

    def __init__(self, ID, name, reward):
        super().__init__(ID, name, reward)

    def get_reward(self, total_cost):
        return round(total_cost * BasicCustomer.reward_rate)

    def update_reward(self, value):
        self._reward += value

        print("TESTIG Basic")

    def display_info(self):
        print(f"Basic Customer ID: {self._ID}, Name: {self._name}, Reward: {self._reward}, Reward Rate: {BasicCustomer.reward_rate}%")

    @staticmethod
    def set_reward_rate(rate):
        BasicCustomer.reward_rate = rate

class VIPCustomer(Customer):
    reward_rate = 1.0

    def __init__(self, ID, name, reward, discount_rate=8):
        super().__init__(ID, name, reward)
        self._discount_rate = discount_rate

    def get_discount(self, total_cost):
        print("DIS RATE , DIS",self._discount_rate ,total_cost * self._discount_rate / 100)
        return total_cost * self._discount_rate

    def get_reward(self, total_cost):
        return round(total_cost * VIPCustomer.reward_rate)

    def update_reward(self, value):
        self._reward += value

    def display_info(self):
        print(f"VIP Customer ID: {self._ID}, Name: {self._name}, Reward: {self._reward}, Reward Rate: {VIPCustomer.reward_rate}%, Discount Rate: {self._discount_rate}%")

    def set_discount_rate(self, rate):
        self._discount_rate = rate

class Product:
    def __init__(self, ID, name, price, prescription):
        self._ID = ID
        self._name = name
        self._price = price
        self._prescription = prescription

    def get_ID(self):
        return self._ID

    def get_name(self):
        return self._name

    def get_price(self):
        return self._price

    def requires_prescription(self):
        return self._prescription == 'y'

    def display_info(self):
        print(f"Product ID: {self._ID}, Name: {self._name}, Price: {self._price} AUD, Requires Prescription: {self._prescription}")

class Bundle(Product):
    def __init__(self, ID, name, components):
        self._ID = ID
        self._name = name
        self._components = components
        self._price = None
        self._prescription = None

    def set_price(self, price):
        self._price = price

    def set_prescription(self, prescription):
        self._prescription = prescription

    def get_components(self):
        return self._components

    def display_info(self):
        print(f"Bundle ID: {self._ID}, Name: {self._name}, Components: {', '.join(self._components)}, Price: {self._price} AUD, Requires Prescription: {self._prescription}")

class Order:
    def __init__(self, customer, products, quantities):
        self._customer = customer
        self._products = products
        self._quantities = quantities

    def compute_cost(self):
        original_cost = 0
        discount = 0
        for product, quantity in zip(self._products, self._quantities):
            print("LOOP:",product,quantity)
            original_cost += product.get_price() * quantity
            discount += self._customer.get_discount(product.get_price() * quantity)
        print("EXITING LOOP")
        final_cost = original_cost - discount
        print("HIT")
        reward = self._customer.get_reward(final_cost)
        print("REWARD EaRNED",reward)
        self._customer.update_reward(reward)
        return original_cost, discount, final_cost, reward

class Records:
    def __init__(self):
        self.customers = []
        self.products = []
        self.orders = []

    def read_customers(self, filename):
        print(f"Reading customers from {filename}...")
        with open(filename, 'r') as file:
            for line in file:
                parts = line.strip().split(',')
                if parts[0].startswith('B'):
                    customer = BasicCustomer(parts[0], parts[1], int(parts[2]))
                elif parts[0].startswith('V'):
                    discount_rate = float(parts[3].strip())
                    customer = VIPCustomer(parts[0], parts[1], int(parts[4]), discount_rate)
                self.customers.append(customer)
                print(f"Customer added: {customer.get_ID()} - {customer.get_name()}")

    def read_products(self, filename):
        print(f"Reading products from {filename}...")
        with open(filename, 'r') as file:
            for line in file:
                parts = line.strip().split(',')
                if parts[0].startswith('P'):
                    product = Product(parts[0], parts[1], float(parts[2]), parts[3].strip())
                    self.products.append(product)
                    print(f"Product added: {product.get_ID()} - {product.get_name()}")
                elif parts[0].startswith('B'):
                    bundle = Bundle(parts[0], parts[1], parts[2:])
                    self.products.append(bundle)
                    print(f"Bundle added: {bundle.get_ID()} - {bundle.get_name()}")

    def read_orders(self, filename):
        print(f"Reading orders from {filename}...")
        with open(filename, 'r') as file:
            for line in file:
                parts = line.strip().split(',')
                customer_value = parts[0].strip()
                product_quantities = parts[1:-3]
                total_cost = float(parts[-3])
                earned_rewards = int(parts[-2])
                date = parts[-1]

                customer = self.find_customer(customer_value)
                if not customer:
                    print(f"Error reading order: {line} - Customer not found")
                    continue

                products = []
                quantities = []
                try:
                    for i in range(0, len(product_quantities), 2):
                        product_value = product_quantities[i].strip()
                        quantity = int(product_quantities[i+1])
                        product = self.find_product(product_value)
                        if not product:
                            raise ValueError(f"Product {product_value} not found")
                        products.append(product)
                        quantities.append(quantity)
                except ValueError as e:
                    print(f"Error reading order: {line} - {e}")
                    continue

                order = Order(customer, products, quantities)
                self.orders.append(order)
                print(f"Order added: Customer: {customer.get_name()}, Products: {[p.get_name() for p in products]}, Quantities: {quantities}, Total Cost: {total_cost}, Earned Rewards: {earned_rewards}, Date: {date}")

    def save_orders(self, filename):
        with open(filename, 'w') as file:
            for order in self.orders:
                customer_id = order._customer.get_ID()
                product_info = ','.join([f"{product.get_ID()},{quantity}" for product, quantity in zip(order._products, order._quantities)])
                total_cost, discount, final_cost, earned_rewards = order.compute_cost()
                date = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                print(f"{customer_id},{product_info},{final_cost},{earned_rewards},{date}\n")
                file.write(f"{customer_id},{product_info},{final_cost},{earned_rewards},{date}\n")

    def find_customer(self, value):
        value = value.strip()
        for customer in self.customers:
            if customer.get_ID().strip() == value or customer.get_name().strip() == value:
                return customer
        return None

    def find_product(self, value):
        value = value.strip()
        for product in self.products:
            if product.get_ID().strip() == value or product.get_name().strip() == value:
                return product
        return None

    def list_customers(self):
        for customer in self.customers:
            customer.display_info()

    def list_products(self):
        for product in self.products:
            product.display_info()

    def list_orders(self):
        if not self.orders:
            print("No orders to display.")
            return

        print("Listing all orders:")
        for order in self.orders:
            customer = order._customer
            items = ", ".join([f"{product.get_name()} (x{quantity})" for product, quantity in zip(order._products, order._quantities)])
            original_cost, discount, final_cost, reward = order.compute_cost()
            date = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
            print(f"Customer: {customer.get_name()}, Items: {items}, Original Cost: {original_cost} AUD, Discount: {discount} AUD, Total Cost: {final_cost} AUD, Earned Rewards: {reward}, Date: {date}")

    def list_customer_order_history(self, customer):
        print(f"\nOrder History for {customer.get_name()}:")
        for order in self.orders:
            if order._customer == customer:
                items = ", ".join([f"{product.get_name()} (x{quantity})" for product, quantity in zip(order._products, order._quantities)])
                original_cost, discount, final_cost, reward = order.compute_cost()
                date = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                print(f"Items: {items}, Total Cost: {final_cost} AUD, Earned Rewards: {reward}, Date: {date}")

    def save_all_data(self):
        self.save_orders('orders.txt')
        self.save_products()
        self.save_customers()

class Operations:
    def __init__(self):
        self.records = Records()

    def start(self):
        try:
            self.records.read_customers('customers.txt')
            self.records.read_products('products.txt')
            self.records.read_orders('orders.txt')
        except FileNotFoundError as e:
            print(e)
            print("Missing necessary files. Exiting program.")
            return

        self.calculate_bundle_prices()

        while True:
            print("\n1. Make a purchase")
            print("2. Display existing customers")
            print("3. Display existing products")
            print("4. Add/update product")
            print("5. Display all orders")
            print("6. Display a customer order history")
            print("7. Adjust the reward rate of all Basic customers")
            print("8. Adjust the discount rate of a VIP customer")
            print("9. Exit")
            choice = input("Enter choice: ")
            if choice == '1':
                self.make_purchase()
            elif choice == '2':
                self.records.list_customers()
            elif choice == '3':
                self.records.list_products()
            elif choice == '4':
                self.add_update_product()
            elif choice == '5':
                self.records.list_orders()
            elif choice == '6':
                self.display_customer_order_history()
            elif choice == '7':
                self.adjust_basic_customer_reward_rate()
            elif choice == '8':
                self.adjust_vip_customer_discount_rate()
            elif choice == '9':
                self.records.save_all_data()
                break
            else:
                print("Invalid choice. Please try again.")

    def make_purchase(self):
        customer_name = input("Enter customer name or ID: ")
        customer = self.records.find_customer(customer_name)
        if not customer:
            print("New customer. Registering as Basic Customer.")
            customer = BasicCustomer(f"B{len(self.records.customers) + 1}", customer_name, 0)
            self.records.customers.append(customer)

        products = []
        quantities = []
        while True:
            product_name = input("Enter product name or ID (or type 'done' to finish): ")
            if product_name.lower() == 'done':
                break
            product = self.records.find_product(product_name)
            if not product:
                print("Product not found. Please enter a valid product.")
                continue
            products.append(product)

            while True:
                try:
                    quantity = int(input("Enter quantity: "))
                    if quantity <= 0:
                        raise ValueError
                    quantities.append(quantity)
                    break
                except ValueError:
                    print("Invalid quantity. Please enter a positive integer.")

            if product.requires_prescription():
                while True:
                    has_prescription = input("Do you have a doctor's prescription? (y/n): ")
                    if has_prescription.lower() not in ['y', 'n']:
                        print("Invalid input. Please enter 'y' or 'n'.")
                    elif has_prescription.lower() == 'n':
                        print("Purchase cannot be completed without a doctor's prescription.")
                        products.pop()
                        quantities.pop()
                        break
                    else:
                        break

        if not products:
            print("No products selected.")
            return
        print("CSX REWARDS BEFORE:", customer._reward)
        # Prompt for reward redemption
        if customer._reward > 0:
            print(f"Customer has {customer._reward} reward points.")
            redeem_points = int(input(f"Enter reward points to redeem (10 points = 1 AUD): "))
            if redeem_points > customer._reward:
                redeem_points = customer._reward
            redeem_amount = redeem_points / 10
            customer._reward -= redeem_points
        else:
            redeem_amount = 0

        print("CSX REWARDS After:", customer._reward)
        order = Order(customer, products, quantities)
        self.records.orders.append(order)
        original_cost, discount, final_cost, reward = order.compute_cost()
        final_cost -= redeem_amount

        print("CSX REWARDS After:", customer._reward)

        print(f"Customer Receipt")
        print(f"Name: {customer.get_name()}")
        for product, quantity in zip(products, quantities):
            print(f"Product: {product.get_name()}")
            print(f"Unit Price: {product.get_price()} AUD")
            print(f"Quantity: {quantity}")
        print(f"Original Cost: {original_cost} AUD")
        print(f"Discount: {discount} AUD")
        print(f"Redeemed Amount: {redeem_amount} AUD")
        print(f"Total Cost: {final_cost} AUD")
        print(f"Earned Reward: {reward}")
        print(f"Remaining Reward Points: {customer._reward}")

    def calculate_bundle_prices(self):
        for product in self.records.products:
            if isinstance(product, Bundle):
                total_price = 0
                requires_prescription = False
                for component_id in product.get_components():
                    component = self.records.find_product(component_id)
                    if component:
                        total_price += component.get_price()
                        if component.requires_prescription():
                            requires_prescription = True
                bundle_price = total_price * 0.8
                product.set_price(bundle_price)
                product.set_prescription('y' if requires_prescription else 'n')

    def add_update_product(self):
        product_id = input("Enter product ID or name: ")
        product = self.records.find_product(product_id)
        if product:
            if isinstance(product, Product):
                print(f"Updating product: {product.get_name()}")
                product._name = input(f"Enter new name (current: {product.get_name()}): ")
                product._price = float(input(f"Enter new price (current: {product.get_price()}): "))
                product._prescription = input(f"Requires prescription? (current: {product.requires_prescription()}) (y/n): ").lower()
            elif isinstance(product, Bundle):
                print(f"Updating bundle: {product.get_name()}")
                product._name = input(f"Enter new name (current: {product.get_name()}): ")
                component_ids = input("Enter new component IDs (comma separated): ").split(',')
                product._components = component_ids
                self.calculate_bundle_prices()
        else:
            product_type = input("Is this a product (P) or a bundle (B)? ").upper()
            if product_type == 'P':
                name = input("Enter product name: ")
                price = float(input("Enter product price: "))
                prescription = input("Requires prescription? (y/n): ").lower()
                new_product = Product(product_id, name, price, prescription)
                self.records.products.append(new_product)
            elif product_type == 'B':
                name = input("Enter bundle name: ")
                component_ids = input("Enter component IDs (comma separated): ").split(',')
                new_bundle = Bundle(product_id, name, component_ids)
                self.calculate_bundle_prices()
                self.records.products.append(new_bundle)

    def adjust_basic_customer_reward_rate(self):
        rate = float(input("Enter new reward rate (e.g., enter 1 for 100%): "))
        BasicCustomer.set_reward_rate(rate)
        print(f"Reward rate for all Basic customers has been set to {rate * 100}%.")

    def adjust_vip_customer_discount_rate(self):
        customer_name = input("Enter VIP customer name or ID: ")
        customer = self.records.find_customer(customer_name)
        if not customer or not isinstance(customer, VIPCustomer):
            print("VIP customer not found. Please enter a valid VIP customer.")
            return

        rate = float(input("Enter new discount rate (e.g., enter 0.2 for 20%): "))
        customer.set_discount_rate(rate)
        print(f"Discount rate for VIP customer {customer.get_name()} has been set to {rate * 100}%.")

    def display_customer_order_history(self):
        customer_name = input("Enter customer name or ID: ")
        customer = self.records.find_customer(customer_name)
        if not customer:
            print("Customer not found.")
            return
        self.records.list_customer_order_history(customer)

if __name__ == "__main__":
    customer_file = 'customers.txt'
    product_file = 'products.txt'
    order_file = 'orders.txt'

    if len(sys.argv) > 1:
        if len(sys.argv) == 3 or len(sys.argv) == 4:
            customer_file = sys.argv[1]
            product_file = sys.argv[2]
            if len(sys.argv) == 4:
                order_file = sys.argv[3]
        else:
            print("Usage: python ProgFunA2_s1234567.py <customer_file> <product_file> [order_file]")
            sys.exit(1)

    operations = Operations()
    operations.start
